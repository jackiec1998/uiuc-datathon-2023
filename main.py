import ray
ray.init(runtime_env={"env_vars": {"__MODIN_AUTOIMPORT_PANDAS__": "1"}})
import modin.pandas as pandas

def load_data(train):
    if train:
        filename = "data/training_data.csv"
    else:
        filename = "data/forecast_starting_data.csv"
    return pandas.read_csv(
        filename,
        dtype={
            "financial_active": bool,
            "net_payment_behaviour_tripd": "category",
            "promotion_flag": bool,
            "variable_rate_index": bool,
            "account_status_code": "category",
            "active_12_mths": bool,
            "bank_fico_buckets_20": "category",
            "charge_off_reason_code": "category",
            "mob": int,
            "open_closed_flag": "category",
            "ever_delinquent_flg": bool,
            "nbr_mths_due": int,
            "variable_rate_margin": float,
            "stmt_balance": float,
            "prev_balance": float,
            "net_sales": float,
            "net_payments": float,
            "purchase_active": bool,
            "credit_limit_amt": float,
            "credit_limit_pa": float,
            "closed": bool,
            "active": bool,
            "charge_off": bool,
            "charge_off_aged": bool,
            "charge_off_bk": bool,
            "principal_amt": float,
            "principal_amt_chrg_off": float,
            "total_writeoff_amt": float,
            "fee_chg_off_reversal_amt": float,
            "net_finance_charge": float,
            "non_principal_amount_gross": float,
            "non_principal_amount_net": float,
            "non_principal_amount_stmt": float,
            "aged_writeoff_amt": float,
            "bankruptcy_writeoff_amt": float,
            "fc_reversals": float,
            "fee_reversals": float,
            "fraud_writeoff_amt": float,
            "other_writeoff_amt": float,
            "promo_bal_amt": float,
            "recovery_amt": float,
            "writeoff_type_bko": bool,
            "writeoff_type_fraud_kiting": bool,
            "writeoff_type_fraud_synthetic": bool,
            "writeoff_type_deceased": bool,
            "writeoff_type_other": bool,
            "writeoff_type_aged": bool,
            "writeoff_type_settlement": bool,
            "writeoff_type_fraud_other": bool,
            "writeoff_type_repo": bool,
            "writeoff_type_null": bool,
            "writeoff_date": str,
            "due_account_2": bool,
            "due_account_3": bool,
            "due_account_4": bool,
            "due_account_5": bool,
            "due_account_6": bool,
            "due_account_7": bool,
            "due_account_8": bool,
            "due_balance_2": float,
            "due_balance_3": float,
            "due_balance_4": float,
            "due_balance_5": float,
            "due_balance_6": float,
            "due_balance_7": float,
            "due_balance_8": float,
            "snapshot": str,
            "mth_code": str,
            "industry": "category",
        },
    ).assign(**{
        "writeoff_date": lambda df: pandas.to_datetime(df["writeoff_date"], format="%Y-%M-%d"),
        "snapshot"     : lambda df: pandas.to_datetime(df["snapshot"     ], format="%Y%M"),
        "mth_code"     : lambda df: pandas.to_datetime(df["mth_code"     ], format="%Y%M"),
    })

if __name__ == "__main__":
    training_data = load_data(train=True)
    forecast_data = load_data(train=False)
